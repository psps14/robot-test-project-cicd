name: Robot Tests CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}
  schedule:
    - cron: "0 0 * * *"       # ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 07:00 ‡∏ô.‡πÑ‡∏ó‡∏¢ (00:00 UTC)

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Google Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Setup Chromedriver
        uses: nanasess/setup-chromedriver@v2

      - name: Run Robot tests (headless)
        env:
          DISPLAY: ":99"
        run: |
          Xvfb :99 -screen 0 1920x1080x24 >/dev/null 2>&1 &
          mkdir -p tests/results
          robot -d tests/results tests

      - name: Upload Robot reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-report
          path: tests/results/**
          if-no-files-found: warn

      # ===== ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö Suite =====
      - name: Build per-suite table (MD + HTML)
        id: suites
        if: always()
        shell: bash
        run: |
          python - <<'PY'
          import xml.etree.ElementTree as ET, html, pathlib
          out = pathlib.Path("tests/results/output.xml")
          rows = []
          if out.exists():
              root = ET.parse(out).getroot()
              top = root.find("suite")
              suites = top.findall("suite") if top is not None else []
              if not suites and top is not None:
                  suites = [top]  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ suite ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
              i = 1
              for s in suites:
                  name = s.get("name")
                  tests = list(s.iter("test"))
                  total = len(tests)
                  fails = sum(1 for t in tests if t.find("status").get("status") != "PASS")
                  status = "PASS" if fails == 0 else "FAIL"
                  rows.append((i, name, status, total, fails))
                  i += 1

          md = ["| No. | Test Suite | Status | Total | Failed |",
                "|---:|---|:---:|---:|---:|"]
          for i,name,status,total,fails in rows:
              sym = "‚úÖ Passed" if status=="PASS" else "‚ùå Failed"
              md.append(f"| {i} | {name} | {sym} | {total} | {fails} |")
          pathlib.Path("tests/results/suite_summary.md").write_text("\n".join(md), encoding="utf-8")

          html_rows = ["<table border='1' cellspacing='0' cellpadding='6'>",
                       "<thead><tr><th>No.</th><th>Test Suite</th><th>Status</th><th>Total</th><th>Failed</th></tr></thead><tbody>"]
          for i,name,status,total,fails in rows:
              sym = "‚úÖ Passed" if status=="PASS" else "‚ùå Failed"
              html_rows.append(f"<tr><td>{i}</td><td>{html.escape(name)}</td><td>{sym}</td><td>{total}</td><td>{fails}</td></tr>")
          html_rows.append("</tbody></table>")
          pathlib.Path("tests/results/suite_summary.html").write_text("\n".join(html_rows), encoding="utf-8")
          PY

          # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô outputs ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ tee (‡∏Å‡∏±‡∏ô delimiter ‡∏û‡∏±‡∏á)
          echo "md<<SUITE_MD"   | tee -a "$GITHUB_OUTPUT" > /dev/null
          cat tests/results/suite_summary.md   | tee -a "$GITHUB_OUTPUT" > /dev/null
          echo "SUITE_MD"       | tee -a "$GITHUB_OUTPUT" > /dev/null

          echo "html<<SUITE_HTML" | tee -a "$GITHUB_OUTPUT" > /dev/null
          cat tests/results/suite_summary.html | tee -a "$GITHUB_OUTPUT" > /dev/null
          echo "SUITE_HTML"       | tee -a "$GITHUB_OUTPUT" > /dev/null

      - name: Append suite table to Job Summary
        if: always()
        run: |
          echo "### Suite Status" >> $GITHUB_STEP_SUMMARY
          cat tests/results/suite_summary.md >> $GITHUB_STEP_SUMMARY

      - name: Summary
        if: always()
        run: |
          echo "## Robot Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f tests/results/output.xml ]; then
            PASSED=$(grep -o 'pass="[0-9]\+"' tests/results/output.xml | head -1 | sed 's/[^0-9]*//g')
            FAILED=$(grep -o 'fail="[0-9]\+"' tests/results/output.xml | head -1 | sed 's/[^0-9]*//g')
            echo "- Passed: $PASSED  |  Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô artifact \`robot-report\`" >> $GITHUB_STEP_SUMMARY
          fi

      # ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏ö‡∏á‡∏≤‡∏ô (‡∏£‡∏ß‡∏°‡πÄ‡∏Ñ‡∏™ fail) + ‡πÅ‡∏ô‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö Suite
      - name: Send Email Report (Gmail SMTP)
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          to:       ${{ secrets.MAIL_TO }}
          from:     ${{ secrets.MAIL_USERNAME }}
          subject:  "Robot Framework Test Results [Status: ${{ job.status }}]"
          html_body: |
            <h3>Robot Framework Daily Report</h3>
            <p>üìã Status : <b>${{ job.status }}</b></p>
            <p>üîó GitHub Actions Log : <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Action Run Link</a></p>
            <h4>Suite Status</h4>
            ${{ steps.suites.outputs.html }}
            <p>Attached: report.html, log.html, output.xml, suite_summary.html</p>
          attachments: |
            tests/results/report.html
            tests/results/log.html
            tests/results/output.xml
